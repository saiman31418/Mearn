{"version":3,"sources":["components/persondata.js","service/person.js","App.js","index.js"],"names":["Form","handlename","handlenumber","addNote","newName","focusName","Phonenumber","onSubmit","value","onChange","required","autoComplete","ref","type","baseUrl","axios","get","then","response","data","name","number","post","catch","id","delete","updatedPerson","put","App","useState","persons","setPersons","setNewName","setPhn","searchName","setSearchName","message","setMessage","setType","useRef","useEffect","person","console","log","Notification","timer","setTimeout","clearTimeout","className","event","target","preventDefault","existingPerson","find","window","confirm","map","current","focus","error","filter","newPerson","concat","warn","toLowerCase","includes","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79649143.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Form =({handlename,handlenumber,addNote,newName,focusName,Phonenumber}) =>{\r\n\r\n    return (\r\n        <div>\r\n            <h1>add a new contact</h1>\r\n            <form onSubmit={addNote}>\r\n        <div>\r\n        name:<input\r\n          value={newName}\r\n          onChange={handlename}\r\n          required autoComplete='off' \r\n         ref={focusName}\r\n        />\r\n         <div>number: <input \r\n         value={Phonenumber}\r\n         onChange={handlenumber}\r\n         required autoComplete='off' \r\n         /></div>\r\n        </div>\r\n        <div>\r\n        <button type=\"submit\">add</button>\r\n        </div>\r\n      </form> \r\n\r\n \r\n\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Form","\r\nimport axios from 'axios';\r\nconst baseUrl = 'http://localhost:3001/api/persons';\r\n\r\n\r\nconst getAll = () => (\r\n    axios\r\n        .get(baseUrl)\r\n        .then(response => response.data)\r\n);\r\n\r\n\r\nconst create = (name, number) => (\r\n    \r\n    axios\r\n        .post(baseUrl, {name, number})\r\n        .then(response => response.data\r\n           ).catch(\r\n               \r\n           )\r\n\r\n       \r\n       \r\n);\r\n\r\n\r\nconst remove = id => axios.delete(`${baseUrl}/${id}`);\r\n\r\n\r\nconst update = (id, updatedPerson) => (\r\n    axios\r\n        .put(`${baseUrl}/${id}`, updatedPerson)\r\n        .then(response => response.data)\r\n        \r\n\r\n       \r\n);\r\n\r\nexport default {getAll, create, remove, update};","import React from 'react'\nimport { useState,useEffect,useRef } from 'react'\n\nimport './index.css';\nimport Form from './components/persondata'\nimport person from './service/person'\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('') \n  const [Phonenumber,setPhn]=useState('')\n  const [ searchName, setSearchName ] = useState('');\n  const [ message, setMessage ] = useState(null);\n  const [ type, setType ] = useState('');\n  const focusName = useRef();\n  \n  \n\n  useEffect(() => {\n    person.getAll()\n    .then(setPersons);\n    console.log(persons)\n  }, []);\n  \n  const addNote = event => {\n    event.preventDefault()\n   const existingPerson=persons.find(person=>person.name === newName);\n\n   if(existingPerson){\n   window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`) &&\n    person.update(existingPerson.id,{number:Phonenumber,name:newName})\n    .then(updatedPerson=>{\n      setPersons(persons.map(person=>person.id === updatedPerson.id ? updatedPerson : person));\n\n      setMessage(`Updated ${newName}'s number`);\n      setType('info');\n      setNewName('');\n      setPhn('');\n      focusName.current.focus();    \n    })\n    .catch(error=>{\n      if(error.name ==='TypeError'){\n        setMessage(`Information of ${newName} has already been deleted`);\n        {console.log(persons)}\n        setPersons(persons.filter(person=>person.id !== existingPerson.id));\n        \n\n      }\n      else{\n        setMessage(error.response.data.error);\n      }\n      setType('error');\n\n    });\n   }\nelse{\n  \n    person.create(newName,Phonenumber)\n    .then(newPerson=>{\n      setPersons(persons.concat(newPerson));\n      setMessage(`Added ${newName}`);\n      setType('info');\n      setNewName('')\n    setPhn('')\n    \n      \n    console.log(persons) \n\n    })\n    .catch((error) => {\n      console.warn(error.response.data.error);\n      setMessage(error.response.data.error)\n      setType(\"error\")\n    })\n   \n\n  \n\n    \n   \n   \n  }\n    \n};\n\n\nconst Notification = ({message, type, setMessage, setType}) => {\n\n \n  useEffect(() => {\n      if (message) {\n          const timer = setTimeout(() => {\n              setMessage(null);\n              setType('');\n          }, 5000);\n          return () => clearTimeout(timer);\n      }\n     \n  }, [message]);\n\n  return (\n      message ?\n      <div className={type}>\n          {message}\n      </div>\n      :\n      null\n  );\n};\nconst deletePerson=(id,name)=>{\n  if(window.confirm(`Delete ${name}?`)){\n    person.remove(id)\n    .then(()=>{\n      setPersons(persons.filter(person => person.id !== id));\n      setMessage(`Deleted ${name}`);\n      setType('info'); \n    });\n  }\n};\n\n\n  const handlename = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n  const handlenumber = (event) => {\n    console.log(event.target.value)\n    setPhn(event.target.value)\n  }\n\n\n\n\n\n\n  return (\n    <div>\n      <h1>phonebook</h1>\n      <Notification message={message} type={type} setMessage={setMessage} setType={setType} />\n      <div>\n        Search by name:<input value={searchName} \n        onChange={event=>setSearchName(event.target.value)}/>\n      </div>\n      <Form  addNote={addNote} newName={newName} handlename={handlename} handlenumber={handlenumber} focusName={focusName} Phonenumber={Phonenumber}></Form>\n     \n      <h1>Numbers</h1>\n          \n            {\n                persons.filter((person) => person.name.toLowerCase().includes(searchName.toLowerCase()))\n                .map(person => (\n                    <li key={person.id}>\n                        {person.name} {person.number} &nbsp;\n                        <button onClick={() => deletePerson(person.id, person.name)}>Delete</button>\n                        \n                    </li>\n                ))\n            }\n       \n    </div>\n  )\n}\nexport default App","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\n\n\n\n\n\n\n\nReactDOM.render(\n\n  <div>\n  <App></App>\n \n  \n \n \n    \n    </div>\n\n   \n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}